import json
import os
from aiogram import types
from zoneinfo import ZoneInfo
from datetime import datetime, timezone
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from yookassa.domain.exceptions.bad_request_error import BadRequestError


from states import Form
from utils import generate_workout
from db import get_user, save_user, get_subscription, set_free_workout_used, get_last_pending_payment_id, upsert_subscription
from keyboards import start_kb, level_kb, limitations_kb, equipment_kb, duration_kb
from constants import LEVELS, LIMITATIONS, EQUIPMENT, DURATION

from billing.service import (
    start_or_resume_checkout, check_and_activate, cancel_subscription, is_active
)

ADMIN_ID = int(os.getenv("ADMIN_ID", "0")) 

LEVELS_SET = set(LEVELS)                     
LIMITATIONS_SET = set(LIMITATIONS)          
EQUIPMENT_SET = set(EQUIPMENT)               
DURATION_SET = set(DURATION)  

def register_handlers(dp: Dispatcher) -> None:


    # --- email helpers ---
    import re
    from typing import Optional

    _EMAIL_RE = re.compile(r"^[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}$")

    def _valid_email(s: str) -> bool:
        return bool(_EMAIL_RE.match((s or "").strip()))

    def _extract_email_from_subscription_row(sub) -> Optional[str]:
        """
        –ü–æ–∫–∞ –Ω–µ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω –∏–Ω–¥–µ–∫—Å email –≤ subscriptions ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ e-mail.
        """
        if not sub:
            return None
        for x in sub:
            if isinstance(x, str) and "@" in x and " " not in x:
                return x
        return None

    # --- —Å—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ ---
    @dp.message_handler(commands='start', state="*")
    async def start_handler(message: types.Message, state: FSMContext):
        await state.finish()
            # 1) –†–∞–∑–±–∏—Ä–∞–µ–º deep-link –∞—Ä–≥—É–º–µ–Ω—Ç –∫ /start
        payload = message.get_args()  # –≤–µ—Ä–Ω—ë—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ '?start='

        if payload == "payment_success":
            user_id = message.from_user.id

            # 2) –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            #    (–ø–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ –∏—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
            from db import get_last_pending_payment_id, get_payment_confirmation_url
            payment_id = await get_last_pending_payment_id(user_id)

            if not payment_id:
                # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—Å—ë –∑–∞–≤–µ—Ä—à–∏–ª/–æ—Ç–º–µ–Ω–∏–ª
                return await message.answer(
                    "–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞. "
                    "–°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ö–æ–º–∞–Ω–¥–∞: /status"
                )

            # 3) –ü—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –ø–ª–∞—Ç—ë–∂ –∏–∑ –ÆKassa –∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            from billing.service import check_and_activate
            try:
                result = await check_and_activate(user_id, payment_id)
            except Exception:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –≤–Ω–µ–¥—Ä–∏—Ç–µ YookassaNetworkError
                return await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /check —á—É—Ç—å –ø–æ–∑–∂–µ.")

            if result == "succeeded":
                return await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
            elif result == "pending":
                # –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
                url = await get_payment_confirmation_url(payment_id)
                kb = InlineKeyboardMarkup()
                if url:
                    kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
                kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
                return await message.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /check —á—É—Ç—å –ø–æ–∑–∂–µ.", reply_markup=kb)
            else:
                return await message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /subscribe –µ—â—ë —Ä–∞–∑.")

        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –§–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∫—É—Ä–∏–ª—å—â–∏–∫–∞ üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=start_kb
        )

    @dp.message_handler(lambda m: m.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
    async def handle_new_form(message: types.Message, state: FSMContext):
        await state.finish()
        await Form.level.set()
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å–∏–ª–æ–≤—ã–º–∏?", reply_markup=level_kb)

    @dp.message_handler(lambda m: m.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É")
    async def handle_existing_form(message: types.Message, state: FSMContext):
        row = await get_user(message.from_user.id)
        if not row:
            return await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")

        # users: (user_id, level, limitations, equipment, duration_minutes, free_workout_used, email, phone)
        level = row[1]
        limitations_json = row[2]
        equipment_json = row[3]

        limitations = json.loads(limitations_json) if limitations_json else []
        equipment = json.loads(equipment_json) if equipment_json else []

        # –∫–ª–∞–¥—ë–º –≤ state –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await state.update_data(level=level, limitations=limitations, equipment=equipment)
        await Form.duration.set()
        text = (
            "üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(limitations) if limitations else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(equipment) if equipment else '–ù–µ—Ç'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
        )
        await message.answer(text, reply_markup=duration_kb)

    # --- –∞–Ω–∫–µ—Ç–∞ ---
    @dp.message_handler(state=Form.level)
    async def process_level(message: types.Message, state: FSMContext):
        if message.text not in LEVELS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=level_kb)
        await state.update_data(level=message.text, limitations=[])
        await Form.limitations.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=limitations_kb)

    @dp.message_handler(state=Form.limitations)
    async def process_limitations(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("limitations", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(limitations=current, equipment=[])
            await Form.equipment.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=equipment_kb)

        if message.text not in LIMITATIONS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=limitations_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" ‚Äî –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if message.text == "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
            await state.update_data(limitations=["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"])
            return

        # –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º, —É–±—Ä–∞–≤ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –±—ã–ª–æ
        if "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(limitations=current)

    @dp.message_handler(state=Form.equipment)
    async def process_equipment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("equipment", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(equipment=current)
            await Form.duration.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=duration_kb)

        if message.text not in EQUIPMENT_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=equipment_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ù–∏—á–µ–≥–æ" ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if message.text == "–ù–∏—á–µ–≥–æ":
            await state.update_data(equipment=["–ù–∏—á–µ–≥–æ"])
            return

        # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ "–ù–∏—á–µ–≥–æ" ‚Äî —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        if "–ù–∏—á–µ–≥–æ" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(equipment=current)

    @dp.message_handler(state=Form.duration)
    async def process_duration(message: types.Message, state: FSMContext):
        if message.text not in DURATION_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=duration_kb)

        await state.update_data(duration_minutes=message.text)

        # --- –¥–æ—Å—Ç—É–ø: free + –ø–æ–¥–ø–∏—Å–∫–∞ ---
        user_id = message.from_user.id
        sub = await get_subscription(user_id)
        user_row = await get_user(user_id)
        free_used = False
        if user_row and len(user_row) >= 6:
            free_used = bool(user_row[5])

        if not is_active(sub):
            if not free_used:
                # –¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏ –ø–æ–º–µ—á–∞–µ–º
                await set_free_workout_used(user_id, True)
            else:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª
                pay_kb = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="go_subscribe")
                )
                await message.answer(
                    "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=pay_kb
                )
                return  # –≤—ã—Ö–æ–¥–∏–º –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        # --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ---
        user_data = await state.get_data()
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...", reply_markup=ReplyKeyboardRemove())

        workout = generate_workout(user_data)  # —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞
        if not workout:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üò¢")
        else:
            text = "–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
            for i, ex in enumerate(workout, start=1):
                text += f"{i}. {ex['name']}\n–°—Å—ã–ª–∫–∞: {ex['link']}\n\n"
            await message.answer(text)

        await save_user(
            user_id=user_id,
            level=user_data['level'],
            limitations=user_data['limitations'],
            equipment=user_data['equipment'],
            duration_minutes=user_data['duration_minutes']
        )
        await state.finish()

    @dp.message_handler(commands='status', state="*")
    async def status_cmd(message: types.Message):
        from db import get_payment_confirmation_url, get_subscription
        user_id = message.from_user.id
        sub = await get_subscription(user_id)

        text_lines = []
        kb = InlineKeyboardMarkup()

        if not sub:
            text_lines.append("–°—Ç–∞—Ç—É—Å: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.")
        else:
            status = sub[1]
            cpe = sub[3] or "-"
            nca = sub[4] or "-"
            text_lines.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}")
            text_lines.append(f"–î–æ—Å—Ç—É–ø (–æ–ø–ª–∞—á–µ–Ω–æ) –¥–æ: {cpe}")
            if status == "active":
                text_lines.append(f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {nca} (‚âà –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)")

        pending_id = await get_last_pending_payment_id(user_id)
        if pending_id:
            url = await get_payment_confirmation_url(pending_id)
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{pending_id}"))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{pending_id}"))
            text_lines.append("\n–ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂.")

        text_lines.append("\n–ö–æ–º–∞–Ω–¥—ã: /subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å, /check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, /cancel ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ")
        await message.answer("\n".join(text_lines), reply_markup=kb if kb.inline_keyboard else None)

    @dp.message_handler(commands='cancel', state="*")
    async def cancel_cmd(message: types.Message):
        sub = await get_subscription(message.from_user.id)
        if not sub:
            return await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")

        # sub: (user_id, status, payment_method_id, current_period_end, ...)
        status, cpe = sub[1], sub[3]
        if not cpe:
            return await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")

        # —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞?
        if status == "cancelled":
            return await message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –î–æ—Å—Ç—É–ø ‚Äî –¥–æ {cpe}.")

        # —Å–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_yes"),
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="cancel_no"),
        )
        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ? –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ {cpe}.",
            reply_markup=kb
        )

    @dp.callback_query_handler(lambda c: c.data == "cancel_yes", state="*")
    async def cancel_yes_cb(call: types.CallbackQuery):
        await call.answer()
        await cancel_subscription(call.from_user.id)
        await call.message.edit_text("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. /status")

    @dp.callback_query_handler(lambda c: c.data == "cancel_no", state="*")
    async def cancel_no_cb(call: types.CallbackQuery):
        await call.answer("–û—Å—Ç–∞–≤–∏–ª–∏ –∫–∞–∫ –µ—Å—Ç—å ‚úÖ", show_alert=False)



    @dp.message_handler(commands='subscribe', state="*")
    async def subscribe_cmd(message: types.Message, state: FSMContext):
        user_id = message.from_user.id

        sub = await get_subscription(user_id)
        if is_active(sub):
            cpe = sub[3] if sub else "-"
            cancelled_note = " (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)" if sub and sub[1] == "cancelled" else ""
            return await message.answer(
                f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞{cancelled_note} ‚úÖ\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {cpe}\n\n"
                "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞: /status"
            )

        # e-mail: –±–µ—Ä—ë–º –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∏–∑ state; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
        data = await state.get_data()
        sub_email = _extract_email_from_subscription_row(sub) or data.get("email")

        if not _valid_email(sub_email or ""):
            await state.update_data(next_flow="subscribe")
            await Form.email.set()
            return await message.answer("–í–≤–µ–¥–∏—Ç–µ e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:")

        # —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å pending –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É (–ø–µ—Ä–µ–¥–∞—ë–º email!)
        try:
            payment_id, url = await start_or_resume_checkout(user_id, email=sub_email)
        except BadRequestError as e:
            return await message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")
        except Exception:
            return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{payment_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.", reply_markup=kb)


    @dp.message_handler(state=Form.email)
    async def process_email_for_subscription(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª e-mail ‚Üí –≤–∞–ª–∏–¥–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
        """
        user_id = message.from_user.id
        email = (message.text or "").strip()

        if not _valid_email(email):
            return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π e-mail. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º e-mail –≤ –ø–æ–¥–ø–∏—Å–∫–µ (–ø–µ—Ä—Å–∏—Å—Ç) + –≤ state
        await upsert_subscription(user_id, email=email)
        await state.update_data(email=email)

        try:
            payment_id, url = await start_or_resume_checkout(user_id, email=email)
        except BadRequestError as e:
            await state.finish()
            return await message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")
        except Exception:
            await state.finish()
            return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{payment_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))

        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–ª –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)
        await state.finish()


    @dp.message_handler(commands='check', state="*")
    async def check_cmd(message: types.Message):
        from db import get_payment_confirmation_url
        payment_id = await get_last_pending_payment_id(message.from_user.id)
        if not payment_id:
            return await message.answer("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")

        try:
            result = await check_and_activate(message.from_user.id, payment_id)
        except BadRequestError as e:
            return await message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")

        if result == "succeeded":
            await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        elif result == "pending":
            url = await get_payment_confirmation_url(payment_id)
            kb = InlineKeyboardMarkup()
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
            await message.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ /check —Å–Ω–æ–≤–∞.", reply_markup=kb)
        else:
            await message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /subscribe –µ—â—ë —Ä–∞–∑.")


    # --- –∫–æ–ª–±—ç–∫–∏ 
    @dp.callback_query_handler(lambda c: c.data and c.data.startswith("chkpay:"), state="*")
    async def check_payment_cb(call: types.CallbackQuery):
        from db import get_payment_confirmation_url
        await call.answer()
        payment_id = call.data.split(":", 1)[1]
        try:
            result = await check_and_activate(call.from_user.id, payment_id)
        except BadRequestError as e:
            return await call.message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")

        if result == "succeeded":
            await call.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        elif result == "pending":
            url = await get_payment_confirmation_url(payment_id)
            kb = InlineKeyboardMarkup()
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
            await call.message.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb)
        else:
            await call.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /subscribe –µ—â—ë —Ä–∞–∑.")


    @dp.callback_query_handler(lambda c: c.data == "go_subscribe", state="*")
    async def go_subscribe_cb(call: types.CallbackQuery, state: FSMContext):
        await call.answer()
        user_id = call.from_user.id

        sub = await get_subscription(user_id)
        if is_active(sub):
            cpe = sub[3] if sub else "-"
            cancelled_note = " (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)" if sub and sub[1] == "cancelled" else ""
            return await call.message.answer(f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞{cancelled_note} ‚úÖ\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {cpe}")

        data = await state.get_data()
        sub_email = _extract_email_from_subscription_row(sub) or data.get("email")
        if not _valid_email(sub_email or ""):
            await state.update_data(next_flow="go_subscribe")
            await Form.email.set()
            return await call.message.answer("–í–≤–µ–¥–∏—Ç–µ e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:")

        try:
            payment_id, url = await start_or_resume_checkout(user_id, email=sub_email)
        except BadRequestError as e:
            return await call.message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")
        except Exception:
            return await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{payment_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
        await call.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.", reply_markup=kb)



    @dp.callback_query_handler(lambda c: c.data.startswith("cancelpay:"), state="*")
    async def cancel_payment_cb(call: types.CallbackQuery, state: FSMContext):
        from db import upsert_payment_status
        await call.answer()
        payment_id = call.data.split(":", 1)[1]
        user_id = call.from_user.id

        # –ø–æ–º–µ—Ç–∏–º –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º —É —Å–µ–±—è
        await upsert_payment_status(user_id, payment_id, 0, "RUB", "canceled", raw_text='{"reason":"user_cancelled"}')

        # –±–µ—Ä—ë–º e-mail; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –ø—Ä–æ–π—Ç–∏ /subscribe, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å e-mail
        sub = await get_subscription(user_id)
        data = await state.get_data()
        sub_email = _extract_email_from_subscription_row(sub) or data.get("email")

        if not _valid_email(sub_email or ""):
            return await call.message.answer("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /subscribe –∏ —É–∫–∞–∂–∏—Ç–µ e-mail –¥–ª—è —á–µ–∫–∞.")

        try:
            new_id, url = await start_or_resume_checkout(user_id, email=sub_email)
        except Exception:
            return await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{new_id}"))
        await call.message.answer("–¢–µ–∫—É—â–∏–π –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π:", reply_markup=kb)



    #++++++ –°–õ–£–ñ–ï–ë–ù–û–ï +++++++++++

    def _parse_local_datetime(s: str) -> datetime:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
        - 'YYYY-MM-DD HH:MM'
        - 'YYYY-MM-DDTHH:MM'
        - 'YYYY-MM-DD HH:MM:SS'
        - 'YYYY-MM-DDTHH:MM:SS'
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç aware-datetime –≤ Europe/Vienna.
        """
        s = s.strip().replace("T", " ")
        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M"):
            try:
                dt_naive = datetime.strptime(s, fmt)
                return dt_naive.replace(tzinfo=ZoneInfo("Europe/Vienna"))
            except ValueError:
                continue
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π 'YYYY-MM-DD HH:MM'.")

    @dp.message_handler(commands='admin_next_charge', state="*")
    async def admin_next_charge_cmd(message: types.Message):
        """
        /admin_next_charge <user_id> <YYYY-MM-DD HH:MM>
        –ü—Ä–∏–º–µ—Ä: /admin_next_charge 197925837 2025-08-18 10:00
        –í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ Europe/Vienna, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –≤ UTC (ISO-—Å—Ç—Ä–æ–∫–∞).
        """
        if message.from_user.id != ADMIN_ID:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            parts = message.text.strip().split(maxsplit=2)
            if len(parts) < 3:
                raise ValueError("–ù—É–∂–Ω–æ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: <user_id> <YYYY-MM-DD HH:MM>")

            uid_str, dt_str = parts[1], parts[2]
            uid = int(uid_str)

            # –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            local_dt = _parse_local_datetime(dt_str)
            utc_dt = local_dt.astimezone(timezone.utc)

            # –ü–∏—à–µ–º –≤ –ë–î –ò–ú–ï–ù–ù–û ISO-—Å—Ç—Ä–æ–∫–æ–π 
            await upsert_subscription(uid, next_charge_at=utc_dt.isoformat())

            # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç
            sub = await get_subscription(uid)
            stored_nca = sub[4] if sub else None  # (user_id, status, payment_method_id, current_period_end, next_charge_at, ...)
            try:
                stored_utc = datetime.fromisoformat(stored_nca).replace(tzinfo=timezone.utc)
                stored_local = stored_utc.astimezone(ZoneInfo("Europe/Vienna")).strftime("%Y-%m-%d %H:%M")
            except Exception:
                stored_local = str(stored_nca)

            return await message.answer(
                f"OK: next_charge_at –¥–ª—è {uid} ‚Üí {utc_dt.isoformat()} (UTC)\n"
                f"= {stored_local} (Europe/Vienna) ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
            )
        except Exception as e:
            return await message.answer(
                f"–û—à–∏–±–∫–∞: {e}\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_next_charge 197925837 2025-08-18 10:00"
            )
