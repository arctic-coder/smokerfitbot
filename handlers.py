import json
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from yookassa.domain.exceptions.bad_request_error import BadRequestError


from states import Form
from utils import generate_workout
from db import get_user, save_user, get_subscription, set_free_workout_used, get_last_pending_payment_id
from keyboards import start_kb, level_kb, limitations_kb, equipment_kb, duration_kb
from constants import LEVELS, LIMITATIONS, EQUIPMENT, DURATION

from billing.service import (
    start_or_resume_checkout, start_subscription, check_and_activate, cancel_subscription, is_active
)

# –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
LEVELS_SET = set(LEVELS)                     
LIMITATIONS_SET = set(LIMITATIONS)          
EQUIPMENT_SET = set(EQUIPMENT)               
DURATION_SET = set(DURATION)  

def register_handlers(dp: Dispatcher) -> None:

    # --- —Å—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ ---
    @dp.message_handler(commands='start', state="*")
    async def start_handler(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –§–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∫—É—Ä–∏–ª—å—â–∏–∫–∞ üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=start_kb
        )

    @dp.message_handler(lambda m: m.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
    async def handle_new_form(message: types.Message, state: FSMContext):
        await state.finish()
        await Form.level.set()
        await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å–∏–ª–æ–≤—ã–º–∏?", reply_markup=level_kb)

    @dp.message_handler(lambda m: m.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É")
    async def handle_existing_form(message: types.Message, state: FSMContext):
        row = await get_user(message.from_user.id)
        if not row:
            return await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")

        # users: (user_id, level, limitations, equipment, duration_minutes, free_workout_used, email, phone)
        level = row[1]
        limitations_json = row[2]
        equipment_json = row[3]

        limitations = json.loads(limitations_json) if limitations_json else []
        equipment = json.loads(equipment_json) if equipment_json else []

        # –∫–ª–∞–¥—ë–º –≤ state –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await state.update_data(level=level, limitations=limitations, equipment=equipment)
        await Form.duration.set()
        text = (
            "üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(limitations) if limitations else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(equipment) if equipment else '–ù–µ—Ç'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
        )
        await message.answer(text, reply_markup=duration_kb)

    # --- –∞–Ω–∫–µ—Ç–∞ ---
    @dp.message_handler(state=Form.level)
    async def process_level(message: types.Message, state: FSMContext):
        if message.text not in LEVELS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=level_kb)
        await state.update_data(level=message.text, limitations=[])
        await Form.limitations.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=limitations_kb)

    @dp.message_handler(state=Form.limitations)
    async def process_limitations(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("limitations", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(limitations=current, equipment=[])
            await Form.equipment.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=equipment_kb)

        if message.text not in LIMITATIONS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=limitations_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" ‚Äî –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if message.text == "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
            await state.update_data(limitations=["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"])
            return

        # –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º, —É–±—Ä–∞–≤ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –±—ã–ª–æ
        if "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(limitations=current)

    @dp.message_handler(state=Form.equipment)
    async def process_equipment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("equipment", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(equipment=current)
            await Form.duration.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=duration_kb)

        if message.text not in EQUIPMENT_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=equipment_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ù–∏—á–µ–≥–æ" ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if message.text == "–ù–∏—á–µ–≥–æ":
            await state.update_data(equipment=["–ù–∏—á–µ–≥–æ"])
            return

        # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ "–ù–∏—á–µ–≥–æ" ‚Äî —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        if "–ù–∏—á–µ–≥–æ" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(equipment=current)

    @dp.message_handler(state=Form.duration)
    async def process_duration(message: types.Message, state: FSMContext):
        if message.text not in DURATION_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=duration_kb)

        await state.update_data(duration_minutes=message.text)

        # --- –¥–æ—Å—Ç—É–ø: free + –ø–æ–¥–ø–∏—Å–∫–∞ ---
        user_id = message.from_user.id
        sub = await get_subscription(user_id)
        user_row = await get_user(user_id)
        free_used = False
        if user_row and len(user_row) >= 6:
            free_used = bool(user_row[5])

        if not is_active(sub):
            if not free_used:
                # –¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏ –ø–æ–º–µ—á–∞–µ–º
                await set_free_workout_used(user_id, True)
            else:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ–π–≤–æ–ª–ª
                pay_kb = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="go_subscribe")
                )
                await message.answer(
                    "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=pay_kb
                )
                return  # –≤—ã—Ö–æ–¥–∏–º –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        # --- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ---
        user_data = await state.get_data()
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...", reply_markup=ReplyKeyboardRemove())

        workout = generate_workout(user_data)  # —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞
        if not workout:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üò¢")
        else:
            text = "–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
            for i, ex in enumerate(workout, start=1):
                text += f"{i}. {ex['name']}\n–°—Å—ã–ª–∫–∞: {ex['link']}\n\n"
            await message.answer(text)

        await save_user(
            user_id=user_id,
            level=user_data['level'],
            limitations=user_data['limitations'],
            equipment=user_data['equipment'],
            duration_minutes=user_data['duration_minutes']
        )
        await state.finish()

    @dp.message_handler(commands='status', state="*")
    async def status_cmd(message: types.Message):
        from db import get_payment_confirmation_url
        user_id = message.from_user.id
        sub = await get_subscription(user_id)

        text_lines = []
        kb = InlineKeyboardMarkup()

        if not sub:
            text_lines.append("–°—Ç–∞—Ç—É—Å: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.")
        else:
            status = sub[1]
            cpe = sub[3] or "-"
            text_lines.append(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}")
            text_lines.append(f"–î–æ—Å—Ç—É–ø (–æ–ø–ª–∞—á–µ–Ω–æ) –¥–æ: {cpe}")

        pending_id = await get_last_pending_payment_id(user_id)
        if pending_id:
            url = await get_payment_confirmation_url(pending_id)
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{pending_id}"))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{pending_id}"))
            text_lines.append("\n–ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂.")

        text_lines.append("\n–ö–æ–º–∞–Ω–¥—ã: /subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å, /check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, /cancel ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ")
        await message.answer("\n".join(text_lines), reply_markup=kb if kb.inline_keyboard else None)


    @dp.message_handler(commands='cancel', state="*")
    async def cancel_cmd(message: types.Message):
        sub = await get_subscription(message.from_user.id)
        if not sub:
            return await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")

        # sub: (user_id, status, payment_method_id, current_period_end, ...)
        status, cpe = sub[1], sub[3]
        if not cpe:
            return await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")

        # —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞?
        if status == "cancelled":
            return await message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –î–æ—Å—Ç—É–ø ‚Äî –¥–æ {cpe}.")

        # —Å–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_yes"),
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="cancel_no"),
        )
        await message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ? –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ {cpe}.",
            reply_markup=kb
        )

    @dp.callback_query_handler(lambda c: c.data == "cancel_yes", state="*")
    async def cancel_yes_cb(call: types.CallbackQuery):
        await call.answer()
        await cancel_subscription(call.from_user.id)
        await call.message.edit_text("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. /status")

    @dp.callback_query_handler(lambda c: c.data == "cancel_no", state="*")
    async def cancel_no_cb(call: types.CallbackQuery):
        await call.answer("–û—Å—Ç–∞–≤–∏–ª–∏ –∫–∞–∫ –µ—Å—Ç—å ‚úÖ", show_alert=False)



    @dp.message_handler(commands='subscribe', state="*")
    async def subscribe_cmd(message: types.Message, state: FSMContext):
        user_id = message.from_user.id

        sub = await get_subscription(user_id)
        if is_active(sub):
            cpe = sub[3] if sub else "-"
            cancelled_note = " (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)" if sub and sub[1] == "cancelled" else ""
            return await message.answer(
                f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞{cancelled_note} ‚úÖ\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {cpe}\n\n"
                "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –±–ª–∏–∂–µ –∫ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞: /status"
            )

        # —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å pending –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É
        try:
            payment_id, url = await start_or_resume_checkout(user_id, email=None, phone=None)
        except BadRequestError as e:
            return await message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")
        except Exception:
            return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{payment_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
        await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.", reply_markup=kb)

    @dp.message_handler(commands='check', state="*")
    async def check_cmd(message: types.Message):
        from db import get_payment_confirmation_url
        payment_id = await get_last_pending_payment_id(message.from_user.id)
        if not payment_id:
            return await message.answer("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")

        try:
            result = await check_and_activate(message.from_user.id, payment_id)
        except BadRequestError as e:
            return await message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")

        if result == "succeeded":
            await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        elif result == "pending":
            url = await get_payment_confirmation_url(payment_id)
            kb = InlineKeyboardMarkup()
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
            await message.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ /check —Å–Ω–æ–≤–∞.", reply_markup=kb)
        else:
            await message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /subscribe –µ—â—ë —Ä–∞–∑.")


    # --- –∫–æ–ª–±—ç–∫–∏ 
    @dp.callback_query_handler(lambda c: c.data and c.data.startswith("chkpay:"), state="*")
    async def check_payment_cb(call: types.CallbackQuery):
        from db import get_payment_confirmation_url
        await call.answer()
        payment_id = call.data.split(":", 1)[1]
        try:
            result = await check_and_activate(call.from_user.id, payment_id)
        except BadRequestError as e:
            return await call.message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")

        if result == "succeeded":
            await call.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        elif result == "pending":
            url = await get_payment_confirmation_url(payment_id)
            kb = InlineKeyboardMarkup()
            if url:
                kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", url=url))
            kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
            await call.message.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb)
        else:
            await call.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /subscribe –µ—â—ë —Ä–∞–∑.")


    @dp.callback_query_handler(lambda c: c.data == "go_subscribe", state="*")
    async def go_subscribe_cb(call: types.CallbackQuery):
        await call.answer()
        user_id = call.from_user.id

        sub = await get_subscription(user_id)
        if is_active(sub):
            cpe = sub[3] if sub else "-"
            cancelled_note = " (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)" if sub and sub[1] == "cancelled" else ""
            return await call.message.answer(f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞{cancelled_note} ‚úÖ\n–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {cpe}")

        try:
            payment_id, url = await start_or_resume_checkout(user_id, email=None, phone=None)
        except BadRequestError as e:
            return await call.message.answer(f"–ÆKassa –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å: {getattr(e, 'description', 'invalid_request')}")
        except Exception:
            return await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{payment_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"cancelpay:{payment_id}"))
        await call.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.", reply_markup=kb)



    @dp.callback_query_handler(lambda c: c.data.startswith("cancelpay:"), state="*")
    async def cancel_payment_cb(call: types.CallbackQuery):
        from db import upsert_payment_status
        await call.answer()
        payment_id = call.data.split(":", 1)[1]
        user_id = call.from_user.id

        # –ø–æ–º–µ—Ç–∏–º –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º —É —Å–µ–±—è
        await upsert_payment_status(user_id, payment_id, 0, "RUB", "canceled", raw_text='{"reason":"user_cancelled"}')

        # –∑–∞–ø—É—Å—Ç–∏–º –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∏–ª–∏ –≤–µ—Ä–Ω—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π pending
        try:
            new_id, url = await start_or_resume_checkout(user_id, email=None, phone=None)
        except Exception:
            return await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url))
        kb.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"chkpay:{new_id}"))
        await call.message.answer("–¢–µ–∫—É—â–∏–π –ø–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π:", reply_markup=kb)




