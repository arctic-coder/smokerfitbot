import json
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardRemove

from states import Form
from utils import generate_workout
from db import get_user, save_user
from keyboards import start_kb, level_kb, limitations_kb, equipment_kb, duration_kb
from constants import LEVELS, LIMITATIONS, EQUIPMENT, DURATION_MINUTES

# –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
LEVELS_SET = set(LEVELS)                 # —Å—Ç—Ä–æ–∫–∏
LIMITATIONS_SET = set(LIMITATIONS)       # —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
EQUIPMENT_SET = set(EQUIPMENT)           # —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è "–ù–∏—á–µ–≥–æ")
DURATION_SET = {str(x) for x in DURATION_MINUTES}  # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–∑ Telegram

def register_handlers(dp: Dispatcher) -> None:

    # --- —Å—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ ---
    @dp.message_handler(commands='start')
    async def start_handler(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –§–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∫—É—Ä–∏–ª—å—â–∏–∫–∞ üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=start_kb
        )

    @dp.message_handler(lambda m: m.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
    async def handle_new_form(message: types.Message, state: FSMContext):
        await state.finish()
        await Form.level.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=level_kb)

    @dp.message_handler(lambda m: m.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É")
    async def handle_existing_form(message: types.Message, state: FSMContext):
        row = await get_user(message.from_user.id)
        if not row:
            return await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")

        _, level, limitations_json, equipment_json, _duration_saved = row
        limitations = json.loads(limitations_json) if limitations_json else []
        equipment = json.loads(equipment_json) if equipment_json else []

        # –∫–ª–∞–¥—ë–º –≤ state –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await state.update_data(level=level, limitations=limitations, equipment=equipment)
        await Form.duration.set()
        text = (
            "üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(limitations) if limitations else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(equipment) if equipment else '–ù–µ—Ç'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
        )
        await message.answer(text, reply_markup=duration_kb)

    # --- –∞–Ω–∫–µ—Ç–∞ ---
    @dp.message_handler(state=Form.level)
    async def process_level(message: types.Message, state: FSMContext):
        if message.text not in LEVELS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=level_kb)
        await state.update_data(level=message.text, limitations=[])
        await Form.limitations.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=limitations_kb)

    @dp.message_handler(state=Form.limitations)
    async def process_limitations(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("limitations", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(limitations=current, equipment=[])
            await Form.equipment.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=equipment_kb)

        if message.text not in LIMITATIONS_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=limitations_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" ‚Äî –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if message.text == "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
            await state.update_data(limitations=["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"])
            return

        # –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º, —É–±—Ä–∞–≤ "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –±—ã–ª–æ
        if "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(limitations=current)

    @dp.message_handler(state=Form.equipment)
    async def process_equipment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        current = data.get("equipment", [])

        if message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.update_data(equipment=current)
            await Form.duration.set()
            return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=duration_kb)

        if message.text not in EQUIPMENT_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=equipment_kb)

        # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "–ù–∏—á–µ–≥–æ" ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if message.text == "–ù–∏—á–µ–≥–æ":
            await state.update_data(equipment=["–ù–∏—á–µ–≥–æ"])
            return

        # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ "–ù–∏—á–µ–≥–æ" ‚Äî —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        if "–ù–∏—á–µ–≥–æ" in current:
            current = []

        if message.text not in current:
            current.append(message.text)
            await state.update_data(equipment=current)

    @dp.message_handler(state=Form.duration)
    async def process_duration(message: types.Message, state: FSMContext):
        if message.text not in DURATION_SET:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=duration_kb)

        duration = int(message.text)
        await state.update_data(duration_minutes=duration)

        user_data = await state.get_data()
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...", reply_markup=ReplyKeyboardRemove())

        workout = generate_workout(user_data)  # —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞
        if not workout:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üò¢")
        else:
            text = "–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
            for i, ex in enumerate(workout, start=1):
                text += f"{i}. {ex['name']}\n–°—Å—ã–ª–∫–∞: {ex['link']}\n\n"
            await message.answer(text)

        await save_user(
            user_id=message.from_user.id,
            level=user_data['level'],
            limitations=user_data['limitations'],
            equipment=user_data['equipment'],
            duration_minutes=user_data['duration_minutes']
        )
        await state.finish()
