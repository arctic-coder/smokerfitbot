from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import os

from fsm import Form
from utils import generate_workout

# Bot init
load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Keyboards
level_kb = ReplyKeyboardMarkup(resize_keyboard=True)
level_kb.add("–ù–æ–≤–∏—á–æ–∫", "1‚Äì2 –≥–æ–¥–∞", "3+ –ª–µ—Ç")

limitations_kb = ReplyKeyboardMarkup(resize_keyboard=True)
limitations_kb.add("–ì—Ä—ã–∂–∏", "–ë–æ–ª—å–Ω—ã–µ –∫–æ–ª–µ–Ω–∏", "–û–∂–∏—Ä–µ–Ω–∏–µ")
limitations_kb.add("–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "–ì–æ—Ç–æ–≤–æ")

equipment_kb = ReplyKeyboardMarkup(resize_keyboard=True)
equipment_kb.add("–ì–∞–Ω—Ç–µ–ª–∏", "–®—Ç–∞–Ω–≥–∞", "–¢—É—Ä–Ω–∏–∫", "–†–µ–∑–∏–Ω–∫–∏")
equipment_kb.add("–ù–µ—Ç", "–ì–æ—Ç–æ–≤–æ")

duration_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
duration_kb.add("15", "30", "45")

# Handlers
@dp.message_handler(commands='start')
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç –§–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –∫—É—Ä–∏–ª—å—â–∏–∫–∞ üèãÔ∏è‚Äç‚ôÄÔ∏è\n–ù–∞–ø–∏—à–∏ /go —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message_handler(commands='go')
async def go_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await Form.level.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=level_kb)

@dp.message_handler(state=Form.level)
async def process_level(message: types.Message, state: FSMContext):
    if message.text not in ["–ù–æ–≤–∏—á–æ–∫", "1‚Äì2 –≥–æ–¥–∞", "3+ –ª–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
    await state.update_data(level=message.text)
    await state.update_data(limitations=[])
    await Form.limitations.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=limitations_kb)

@dp.message_handler(state=Form.limitations)
async def process_limitations(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("limitations", [])
    if message.text == "–ì–æ—Ç–æ–≤–æ":
        await state.update_data(limitations=current)
        await state.update_data(equipment=[])
        await Form.equipment.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):", reply_markup=equipment_kb)
    elif message.text not in ["–ì—Ä—ã–∂–∏", "–ë–æ–ª—å–Ω—ã–µ –∫–æ–ª–µ–Ω–∏", "–û–∂–∏—Ä–µ–Ω–∏–µ", "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    if message.text not in current:
        current.append(message.text)
        await state.update_data(limitations=current)

@dp.message_handler(state=Form.equipment)
async def process_equipment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("equipment", [])
    if message.text == "–ì–æ—Ç–æ–≤–æ":
        await state.update_data(equipment=current)
        await Form.duration.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=duration_kb)
    elif message.text not in ["–ì–∞–Ω—Ç–µ–ª–∏", "–®—Ç–∞–Ω–≥–∞", "–¢—É—Ä–Ω–∏–∫", "–†–µ–∑–∏–Ω–∫–∏", "–ù–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    if message.text not in current:
        current.append(message.text)
        await state.update_data(equipment=current)

@dp.message_handler(state=Form.duration)
async def process_duration(message: types.Message, state: FSMContext):
    if message.text not in ["15", "30", "45"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    duration = int(message.text)
    await state.update_data(duration_minutes=duration)

    user_data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...", reply_markup=ReplyKeyboardRemove())

    workout = generate_workout(user_data)
    if not workout:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üò¢")
    else:
        text = "–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
        for i, ex in enumerate(workout, start=1):
            text += f"{i}. {ex['name']}\n–°—Å—ã–ª–∫–∞: {ex['link']}\n\n"
        await message.answer(text)

    await state.finish()

if __name__ == '__main__':
    print("Bot started")
    executor.start_polling(dp, skip_updates=True)
